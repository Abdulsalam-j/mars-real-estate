Index: app/src/main/java/com/example/android/marsrealestate/network/MarsProperty.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2018, The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage com.example.android.marsrealestate.network\r\n\r\nimport android.os.Parcelable\r\nimport androidx.lifecycle.LiveData\r\nimport com.example.android.marsrealestate.overview.MarsApiStatus\r\nimport com.squareup.moshi.Json\r\nimport kotlinx.android.parcel.Parcelize\r\n\r\n/**\r\n * Gets Mars real estate property information from the Mars API Retrofit service and updates the\r\n * [MarsProperty] and [MarsApiStatus] [LiveData]. The Retrofit service returns a coroutine\r\n * Deferred, which we await to get the result of the transaction.\r\n * @param filter the [MarsApiFilter] that is sent as part of the web server request\r\n */\r\n@Parcelize\r\ndata class MarsProperty(\r\n        val id: String,\r\n        // used to map img_src from the JSON to imgSrcUrl in our class\r\n        @Json(name = \"img_src\") val imgSrcUrl: String,\r\n        val type: String,\r\n        val price: Double) : Parcelable {\r\n    val isRental\r\n        get() = type == \"rent\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/android/marsrealestate/network/MarsProperty.kt b/app/src/main/java/com/example/android/marsrealestate/network/MarsProperty.kt
--- a/app/src/main/java/com/example/android/marsrealestate/network/MarsProperty.kt	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/java/com/example/android/marsrealestate/network/MarsProperty.kt	(date 1646851789216)
@@ -21,7 +21,7 @@
 import androidx.lifecycle.LiveData
 import com.example.android.marsrealestate.overview.MarsApiStatus
 import com.squareup.moshi.Json
-import kotlinx.android.parcel.Parcelize
+import kotlinx.parcelize.Parcelize
 
 /**
  * Gets Mars real estate property information from the Mars API Retrofit service and updates the
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2018, The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\napply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: 'kotlin-kapt'\r\napply plugin: \"androidx.navigation.safeargs\"\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n    defaultConfig {\r\n        applicationId \"com.example.android.marsrealestate\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"  \r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n\r\n    // Kotlin\r\n    // implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin\"\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin\"\r\n\r\n    // Constraint Layout\r\n    implementation \"androidx.constraintlayout:constraintlayout:$version_constraint_layout\"\r\n\r\n    // ViewModel and LiveData\r\n    // implementation \"androidx.lifecycle:lifecycle-extensions:$version_lifecycle_extensions\"\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$version_lifecycle\"\r\n\r\n    // Navigation\r\n    implementation \"android.arch.navigation:navigation-fragment-ktx:$version_navigation\"\r\n    implementation \"android.arch.navigation:navigation-ui-ktx:$version_navigation\"\r\n\r\n    // Core with Ktx\r\n    implementation \"androidx.core:core-ktx:$version_core\"\r\n\r\n    // Moshi\r\n    implementation \"com.squareup.moshi:moshi:$version_moshi\"\r\n    implementation \"com.squareup.moshi:moshi-kotlin:$version_moshi\"\r\n\r\n    \r\n    // Retrofit - Deprecated plugins - No more required\r\n    // implementation \"com.squareup.retrofit2:retrofit:$version_retrofit\"\r\n    // implementation \"com.squareup.retrofit2:converter-scalars:$version_retrofit\"\r\n\r\n    // Retrofit with Moshi Converter\r\n    implementation \"com.squareup.retrofit2:converter-moshi:$version_retrofit\"\r\n\r\n    // Coroutines - Deprecated - No more required\r\n    // implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines\"\r\n    // implementation \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines\"\r\n\r\n    // Retrofit Coroutines Support - Deprecated - No more required\r\n    // implementation \"com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter\"\r\n\r\n    // Glide\r\n    implementation \"com.github.bumptech.glide:glide:$version_glide\"\r\n\r\n    // RecyclerView\r\n    implementation \"androidx.recyclerview:recyclerview:$version_recyclerview\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/build.gradle	(date 1646851824941)
@@ -17,19 +17,19 @@
 
 apply plugin: 'com.android.application'
 apply plugin: 'kotlin-android'
-apply plugin: 'kotlin-android-extensions'
+apply plugin: 'kotlin-parcelize'
 apply plugin: 'kotlin-kapt'
 apply plugin: "androidx.navigation.safeargs"
 
 android {
-    compileSdkVersion 30
+    compileSdkVersion 31
     buildFeatures {
         dataBinding true
     }
     defaultConfig {
         applicationId "com.example.android.marsrealestate"
         minSdkVersion 19
-        targetSdkVersion 30
+        targetSdkVersion 31
         versionCode 1
         versionName "1.0"  
     }
@@ -52,10 +52,6 @@
 dependencies {
     implementation fileTree(dir: 'libs', include: ['*.jar'])
 
-    // Kotlin
-    // implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$version_kotlin"
-    implementation "org.jetbrains.kotlin:kotlin-stdlib:$version_kotlin"
-
     // Constraint Layout
     implementation "androidx.constraintlayout:constraintlayout:$version_constraint_layout"
 
@@ -64,8 +60,8 @@
     implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$version_lifecycle"
 
     // Navigation
-    implementation "android.arch.navigation:navigation-fragment-ktx:$version_navigation"
-    implementation "android.arch.navigation:navigation-ui-ktx:$version_navigation"
+    implementation "androidx.navigation:navigation-fragment-ktx:$version_navigation"
+    implementation "androidx.navigation:navigation-ui-ktx:$version_navigation"
 
     // Core with Ktx
     implementation "androidx.core:core-ktx:$version_core"
@@ -74,24 +70,10 @@
     implementation "com.squareup.moshi:moshi:$version_moshi"
     implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"
 
-    
-    // Retrofit - Deprecated plugins - No more required
-    // implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
-    // implementation "com.squareup.retrofit2:converter-scalars:$version_retrofit"
-
     // Retrofit with Moshi Converter
     implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
 
-    // Coroutines - Deprecated - No more required
-    // implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines"
-    // implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines"
-
-    // Retrofit Coroutines Support - Deprecated - No more required
-    // implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter"
-
     // Glide
     implementation "com.github.bumptech.glide:glide:$version_glide"
 
-    // RecyclerView
-    implementation "androidx.recyclerview:recyclerview:$version_recyclerview"
 }
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\n\r\nbuildscript {\r\n    \r\n    ext {\r\n        // Versions for all the dependencies we plan to use. It's particularly useful for kotlin and\r\n        // navigation where the versions of the plugin needs to be the same as the version of the\r\n        // library defined in the app Gradle file\r\n        version_android_gradle_plugin = \"4.0.1\"\r\n        version_core = \"1.3.1\"\r\n        version_constraint_layout = \"2.0.0-rc1\"\r\n        version_glide = \"4.8.0\"\r\n        version_kotlin = \"1.3.72\"\r\n        version_kotlin_coroutines = \"1.3.7\"\r\n        version_lifecycle = \"2.2.0\"\r\n        version_moshi = \"1.9.3\"\r\n        version_navigation = \"1.0.0\"\r\n        version_retrofit = \"2.9.0\"\r\n        version_retrofit_coroutines_adapter = \"0.9.2\"\r\n        version_recyclerview = \"1.2.0-alpha05\"\r\n    }\r\n\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath \"com.android.tools.build:gradle:$version_android_gradle_plugin\"\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin\"\r\n        classpath \"android.arch.navigation:navigation-safe-args-gradle-plugin:$version_navigation\"\r\n    }\r\n}\r\n\r\nallprojects {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/build.gradle	(date 1646851244705)
@@ -6,35 +6,34 @@
         // Versions for all the dependencies we plan to use. It's particularly useful for kotlin and
         // navigation where the versions of the plugin needs to be the same as the version of the
         // library defined in the app Gradle file
-        version_android_gradle_plugin = "4.0.1"
-        version_core = "1.3.1"
-        version_constraint_layout = "2.0.0-rc1"
+        version_android_gradle_plugin = '7.1.2'
+        version_core = "1.7.0"
+        version_constraint_layout = "2.1.3"
         version_glide = "4.8.0"
-        version_kotlin = "1.3.72"
+        version_kotlin = "1.6.10"
         version_kotlin_coroutines = "1.3.7"
-        version_lifecycle = "2.2.0"
+        version_lifecycle = "2.4.1"
         version_moshi = "1.9.3"
-        version_navigation = "1.0.0"
+        version_navigation = "2.4.1"
         version_retrofit = "2.9.0"
         version_retrofit_coroutines_adapter = "0.9.2"
-        version_recyclerview = "1.2.0-alpha05"
     }
 
     repositories {
         google()
-        jcenter()
+        mavenCentral()
     }
     dependencies {
         classpath "com.android.tools.build:gradle:$version_android_gradle_plugin"
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
-        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:$version_navigation"
+        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$version_navigation"
     }
 }
 
 allprojects {
     repositories {
         google()
-        jcenter()
+        mavenCentral()
     }
 }
 
Index: app/src/main/java/com/example/android/marsrealestate/detail/DetailViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n *  Copyright 2018, The Android Open Source Project\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\n\r\npackage com.example.android.marsrealestate.detail\r\n\r\nimport android.app.Application\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.android.marsrealestate.network.MarsProperty\r\n\r\n/**\r\n * Simple ViewModel factory that provides the MarsProperty and context to the ViewModel.\r\n */\r\nclass DetailViewModelFactory(\r\n        private val marsProperty: MarsProperty,\r\n        private val application: Application) : ViewModelProvider.Factory {\r\n    @Suppress(\"unchecked_cast\")\r\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\r\n        if (modelClass.isAssignableFrom(DetailViewModel::class.java)) {\r\n            return DetailViewModel(marsProperty, application) as T\r\n        }\r\n        throw IllegalArgumentException(\"Unknown ViewModel class\")\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/android/marsrealestate/detail/DetailViewModelFactory.kt b/app/src/main/java/com/example/android/marsrealestate/detail/DetailViewModelFactory.kt
--- a/app/src/main/java/com/example/android/marsrealestate/detail/DetailViewModelFactory.kt	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/java/com/example/android/marsrealestate/detail/DetailViewModelFactory.kt	(date 1646851300403)
@@ -28,7 +28,7 @@
         private val marsProperty: MarsProperty,
         private val application: Application) : ViewModelProvider.Factory {
     @Suppress("unchecked_cast")
-    override fun <T : ViewModel?> create(modelClass: Class<T>): T {
+    override fun <T : ViewModel> create(modelClass: Class<T>): T {
         if (modelClass.isAssignableFrom(DetailViewModel::class.java)) {
             return DetailViewModel(marsProperty, application) as T
         }
Index: app/src/main/java/com/example/android/marsrealestate/detail/DetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n *  Copyright 2018, The Android Open Source Project\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\n\r\npackage com.example.android.marsrealestate.detail\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.android.marsrealestate.databinding.FragmentDetailBinding\r\n\r\n/**\r\n * This [Fragment] shows the detailed information about a selected piece of Mars real estate.\r\n * It sets this information in the [DetailViewModel], which it gets as a Parcelable property\r\n * through Jetpack Navigation's SafeArgs.\r\n */\r\nclass DetailFragment : Fragment() {\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\r\n                              savedInstanceState: Bundle?): View? {\r\n        val application = requireNotNull(activity).application\r\n        val binding = FragmentDetailBinding.inflate(inflater)\r\n        binding.lifecycleOwner = this\r\n        val marsProperty = DetailFragmentArgs.fromBundle(arguments!!).selectedProperty\r\n        val viewModelFactory = DetailViewModelFactory(marsProperty, application)\r\n        binding.viewModel = ViewModelProvider(\r\n                this, viewModelFactory).get(DetailViewModel::class.java)\r\n        return binding.root\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/android/marsrealestate/detail/DetailFragment.kt b/app/src/main/java/com/example/android/marsrealestate/detail/DetailFragment.kt
--- a/app/src/main/java/com/example/android/marsrealestate/detail/DetailFragment.kt	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/java/com/example/android/marsrealestate/detail/DetailFragment.kt	(date 1646851781089)
@@ -31,11 +31,11 @@
  */
 class DetailFragment : Fragment() {
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
-                              savedInstanceState: Bundle?): View? {
+                              savedInstanceState: Bundle?): View {
         val application = requireNotNull(activity).application
         val binding = FragmentDetailBinding.inflate(inflater)
         binding.lifecycleOwner = this
-        val marsProperty = DetailFragmentArgs.fromBundle(arguments!!).selectedProperty
+        val marsProperty = DetailFragmentArgs.fromBundle(requireArguments()).selectedProperty
         val viewModelFactory = DetailViewModelFactory(marsProperty, application)
         binding.viewModel = ViewModelProvider(
                 this, viewModelFactory).get(DetailViewModel::class.java)
Index: app/src/main/java/com/example/android/marsrealestate/overview/OverviewViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2018, The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage com.example.android.marsrealestate.overview\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.example.android.marsrealestate.network.MarsApi\r\nimport com.example.android.marsrealestate.network.MarsApiFilter\r\nimport com.example.android.marsrealestate.network.MarsProperty\r\n//import kotlinx.coroutines.CoroutineScope\r\n//import kotlinx.coroutines.Dispatchers\r\nimport androidx.lifecycle.viewModelScope\r\nimport kotlinx.coroutines.launch\r\n\r\nenum class MarsApiStatus { LOADING, ERROR, DONE }\r\n/**\r\n * The [ViewModel] that is attached to the [OverviewFragment].\r\n */\r\nclass OverviewViewModel : ViewModel() {\r\n\r\n    // The internal MutableLiveData that stores the status of the most recent request\r\n    private val _status = MutableLiveData<MarsApiStatus>()\r\n\r\n    // The external immutable LiveData for the request status\r\n    val status: LiveData<MarsApiStatus>\r\n        get() = _status\r\n\r\n    // Internally, we use a MutableLiveData, because we will be updating the List of MarsProperty\r\n    // with new values\r\n    private val _properties = MutableLiveData<List<MarsProperty>>()\r\n\r\n    // The external LiveData interface to the property is immutable, so only this class can modify\r\n    val properties: LiveData<List<MarsProperty>>\r\n        get() = _properties\r\n\r\n    // Internally, we use a MutableLiveData to handle navigation to the selected property\r\n    private val _navigateToSelectedProperty = MutableLiveData<MarsProperty>()\r\n\r\n    // The external immutable LiveData for the navigation property\r\n    val navigateToSelectedProperty: LiveData<MarsProperty>\r\n        get() = _navigateToSelectedProperty\r\n\r\n\r\n\r\n    /**\r\n     * Call getMarsRealEstateProperties() on init so we can display status immediately.\r\n     */\r\n    init {\r\n        getMarsRealEstateProperties(MarsApiFilter.SHOW_ALL)\r\n    }\r\n\r\n    /**\r\n     * Gets filtered Mars real estate property information from the Mars API Retrofit service and\r\n     * updates the [MarsProperty] [List] and [MarsApiStatus] [LiveData]. The Retrofit service\r\n     * returns a coroutine Deferred, which we await to get the result of the transaction.\r\n     * @param filter the [MarsApiFilter] that is sent as part of the web server request\r\n     */\r\n     private fun getMarsRealEstateProperties(filter: MarsApiFilter) {\r\n        viewModelScope.launch {\r\n            _status.value = MarsApiStatus.LOADING\r\n            try {\r\n                _properties.value = MarsApi.retrofitService.getProperties(filter.value)\r\n                _status.value = MarsApiStatus.DONE\r\n            } catch (e: Exception) {\r\n                _status.value = MarsApiStatus.ERROR\r\n                _properties.value = ArrayList()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     */\r\n\r\n    /**\r\n     * When the property is clicked, set the [_navigateToSelectedProperty] [MutableLiveData]\r\n     * @param marsProperty The [MarsProperty] that was clicked on.\r\n     */\r\n    fun displayPropertyDetails(marsProperty: MarsProperty) {\r\n        _navigateToSelectedProperty.value = marsProperty\r\n    }\r\n\r\n    /**\r\n     * After the navigation has taken place, make sure navigateToSelectedProperty is set to null\r\n     */\r\n    fun displayPropertyDetailsComplete() {\r\n        _navigateToSelectedProperty.value = null\r\n    }\r\n\r\n    /**\r\n     * Updates the data set filter for the web services by querying the data with the new filter\r\n     * by calling [getMarsRealEstateProperties]\r\n     * @param filter the [MarsApiFilter] that is sent as part of the web server request\r\n     */\r\n    fun updateFilter(filter: MarsApiFilter) {\r\n        getMarsRealEstateProperties(filter)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/android/marsrealestate/overview/OverviewViewModel.kt b/app/src/main/java/com/example/android/marsrealestate/overview/OverviewViewModel.kt
--- a/app/src/main/java/com/example/android/marsrealestate/overview/OverviewViewModel.kt	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/java/com/example/android/marsrealestate/overview/OverviewViewModel.kt	(date 1646839394796)
@@ -84,9 +84,6 @@
         }
     }
 
-    /**
-     */
-
     /**
      * When the property is clicked, set the [_navigateToSelectedProperty] [MutableLiveData]
      * @param marsProperty The [MarsProperty] that was clicked on.
Index: app/src/main/java/com/example/android/marsrealestate/overview/PhotoGridAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright 2018, The Android Open Source Project\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\n\r\npackage com.example.android.marsrealestate.overview\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.DiffUtil\r\nimport androidx.recyclerview.widget.ListAdapter\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.android.marsrealestate.databinding.GridViewItemBinding\r\nimport com.example.android.marsrealestate.network.MarsProperty\r\n\r\n/**\r\n * This class implements a [RecyclerView] [ListAdapter] which uses Data Binding to present [List]\r\n * data, including computing diffs between lists.\r\n * @param onClick a lambda that takes the\r\n */\r\nclass PhotoGridAdapter( val onClickListener: OnClickListener ) :\r\n        ListAdapter<MarsProperty, PhotoGridAdapter.MarsPropertyViewHolder>(DiffCallback) {\r\n    /**\r\n     * The MarsPropertyViewHolder constructor takes the binding variable from the associated\r\n     * GridViewItem, which nicely gives it access to the full [MarsProperty] information.\r\n     */\r\n    class MarsPropertyViewHolder(private var binding: GridViewItemBinding):\r\n            RecyclerView.ViewHolder(binding.root) {\r\n        fun bind(marsProperty: MarsProperty) {\r\n            binding.property = marsProperty\r\n            // This is important, because it forces the data binding to execute immediately,\r\n            // which allows the RecyclerView to make the correct view size measurements\r\n            binding.executePendingBindings()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Allows the RecyclerView to determine which items have changed when the [List] of [MarsProperty]\r\n     * has been updated.\r\n     */\r\n    companion object DiffCallback : DiffUtil.ItemCallback<MarsProperty>() {\r\n        override fun areItemsTheSame(oldItem: MarsProperty, newItem: MarsProperty): Boolean {\r\n            return oldItem === newItem\r\n        }\r\n\r\n        override fun areContentsTheSame(oldItem: MarsProperty, newItem: MarsProperty): Boolean {\r\n            return oldItem.id == newItem.id\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create new [RecyclerView] item views (invoked by the layout manager)\r\n     */\r\n    override fun onCreateViewHolder(parent: ViewGroup,\r\n                                    viewType: Int): MarsPropertyViewHolder {\r\n        return MarsPropertyViewHolder(GridViewItemBinding.inflate(LayoutInflater.from(parent.context)))\r\n    }\r\n\r\n    /**\r\n     * Replaces the contents of a view (invoked by the layout manager)\r\n     */\r\n    override fun onBindViewHolder(holder: MarsPropertyViewHolder, position: Int) {\r\n        val marsProperty = getItem(position)\r\n        holder.itemView.setOnClickListener {\r\n            onClickListener.onClick(marsProperty)\r\n        }\r\n        holder.bind(marsProperty)\r\n    }\r\n\r\n    /**\r\n     * Custom listener that handles clicks on [RecyclerView] items.  Passes the [MarsProperty]\r\n     * associated with the current item to the [onClick] function.\r\n     * @param clickListener lambda that will be called with the current [MarsProperty]\r\n     */\r\n    class OnClickListener(val clickListener: (marsProperty:MarsProperty) -> Unit) {\r\n        fun onClick(marsProperty:MarsProperty) = clickListener(marsProperty)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/android/marsrealestate/overview/PhotoGridAdapter.kt b/app/src/main/java/com/example/android/marsrealestate/overview/PhotoGridAdapter.kt
--- a/app/src/main/java/com/example/android/marsrealestate/overview/PhotoGridAdapter.kt	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/java/com/example/android/marsrealestate/overview/PhotoGridAdapter.kt	(date 1646839394804)
@@ -28,9 +28,8 @@
 /**
  * This class implements a [RecyclerView] [ListAdapter] which uses Data Binding to present [List]
  * data, including computing diffs between lists.
- * @param onClick a lambda that takes the
  */
-class PhotoGridAdapter( val onClickListener: OnClickListener ) :
+class PhotoGridAdapter(val onClickListener: OnClickListener) :
         ListAdapter<MarsProperty, PhotoGridAdapter.MarsPropertyViewHolder>(DiffCallback) {
     /**
      * The MarsPropertyViewHolder constructor takes the binding variable from the associated
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\r\n<!--\r\n  ~ Copyright 2018, The Android Open Source Project\r\n  ~\r\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  ~ you may not use this file except in compliance with the License.\r\n  ~ You may obtain a copy of the License at\r\n  ~\r\n  ~     http://www.apache.org/licenses/LICENSE-2.0\r\n  ~\r\n  ~ Unless required by applicable law or agreed to in writing, software\r\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  ~ See the License for the specific language governing permissions and\r\n  ~ limitations under the License.\r\n  ~\r\n  -->\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.android.marsrealestate\">\r\n\r\n    <!-- In order for our app to access the Internet, we need to define this permission. -->\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\"com.example.android.marsrealestate.MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/app/src/main/AndroidManifest.xml	(date 1646850808982)
@@ -29,7 +29,8 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-        <activity android:name="com.example.android.marsrealestate.MainActivity">
+        <activity android:name="com.example.android.marsrealestate.MainActivity"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#\r\n#  Copyright 2018, The Android Open Source Project\r\n#\r\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n#  you may not use this file except in compliance with the License.\r\n#  You may obtain a copy of the License at\r\n#\r\n#      http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n#  Unless required by applicable law or agreed to in writing, software\r\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n#  See the License for the specific language governing permissions and\r\n#  limitations under the License.\r\n#\r\n\r\n#Tue Aug 11 17:39:48 PDT 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nandroid.databinding.enableV2=true\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision bbfde7a1976ea2a98161eec3b5c996b073003cf8)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1646838737102)
@@ -20,4 +20,4 @@
 zipStoreBase=GRADLE_USER_HOME
 android.databinding.enableV2=true
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.2-all.zip
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1646850711427)
+++ b/.idea/jarRepositories.xml	(date 1646850711427)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Google" />
+      <option name="name" value="Google" />
+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
